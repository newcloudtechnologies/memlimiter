// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllocatorClient is the client API for Allocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllocatorClient interface {
	MakeAllocation(ctx context.Context, in *MakeAllocationRequest, opts ...grpc.CallOption) (*MakeAllocationResponse, error)
}

type allocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocatorClient(cc grpc.ClientConnInterface) AllocatorClient {
	return &allocatorClient{cc}
}

func (c *allocatorClient) MakeAllocation(ctx context.Context, in *MakeAllocationRequest, opts ...grpc.CallOption) (*MakeAllocationResponse, error) {
	out := new(MakeAllocationResponse)
	err := c.cc.Invoke(ctx, "/schema.Allocator/MakeAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocatorServer is the server API for Allocator service.
// All implementations must embed UnimplementedAllocatorServer
// for forward compatibility.
type AllocatorServer interface {
	MakeAllocation(context.Context, *MakeAllocationRequest) (*MakeAllocationResponse, error)
	mustEmbedUnimplementedAllocatorServer()
}

// UnimplementedAllocatorServer must be embedded to have forward compatible implementations.
type UnimplementedAllocatorServer struct {
}

func (UnimplementedAllocatorServer) MakeAllocation(context.Context, *MakeAllocationRequest) (*MakeAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeAllocation not implemented")
}
func (UnimplementedAllocatorServer) mustEmbedUnimplementedAllocatorServer() {}

// UnsafeAllocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllocatorServer will
// result in compilation errors.
type UnsafeAllocatorServer interface {
	mustEmbedUnimplementedAllocatorServer()
}

func RegisterAllocatorServer(s grpc.ServiceRegistrar, srv AllocatorServer) {
	s.RegisterService(&Allocator_ServiceDesc, srv)
}

func _Allocator_MakeAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocatorServer).MakeAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Allocator/MakeAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocatorServer).MakeAllocation(ctx, req.(*MakeAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Allocator_ServiceDesc is the grpc.ServiceDesc for Allocator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy).
var Allocator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Allocator",
	HandlerType: (*AllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeAllocation",
			Handler:    _Allocator_MakeAllocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allocator.proto",
}
